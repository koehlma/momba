//! Data structures for _models_.

import actions::{ActionDeclaration, ActionLabel}
import automata::{Automaton, AutomatonName, Instance}
import constants::ConstantDeclaration
import expressions::{Expression, Identifier}
import functions::FunctionDeclaration
import variables::VariableDeclaration

#[json(tagged = externally)]
variant ModelType {
    Lts,
    Ctmc,
    Dtmc,
    Mdp,
    Ma,
    Ta,
    Pta,
}

record Model {
    typ: ModelType,
    constants: [ConstantDeclaration],
    globals: [VariableDeclaration],
    initial?: Expression,
    functions: [FunctionDeclaration],
    actions: [ActionDeclaration],
    automata: [Automaton],
    instances: [Instance],
    links: [Link],
}

#[rust(derive(PartialEq, Eq, Hash))]
wrapper InstanceIdx: idx

wrapper LinkSlotName: string

record Link {
    slots: [LinkSlotName],
    vector: [InstanceIdx: LinkPattern],
    result: LinkResult,
}

record LinkPattern {
    label: ActionLabel,
    arguments: [LinkSlotName],
}

#[json(tag = "kind")]
variant LinkResult {
    Silent,
    Labeled: LinkPattern,
}